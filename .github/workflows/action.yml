# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: your-solution-name                         # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Publish NuGet (Private Nuget.Server)
  # You may pin to the exact commit or the version.
  # uses: rollycodes/publish-nuget-private@c67b9a113c5871124d37592cf95fb8e7a0cf1a37
      uses: rollycodes/publish-nuget-private@v3.0.1
      with:
    # Filepath of the project to be packaged, relative to root of repository
        PROJECT_FILE_PATH: "asd"
    # Configuration to build and package (default is Release)
        BUILD_CONFIGURATION: release # optional, default is Release
    # Platform target to compile (default is empty/AnyCPU)
        BUILD_PLATFORM: asd # optional
    # file path to nuspec file
        NUSPEC_FILE: asd # optional
    # NuGet package id, used for version detection & defaults to project name
        PACKAGE_NAME: ad # optional
    # Filepath with version info, relative to root of repository & defaults to PROJECT_FILE_PATH
        VERSION_FILE_PATH: asd # optional
    # Regex pattern to extract version info in a capturing group
        VERSION_REGEX: asd # optional, default is ^\s*<(Package|)Version>(.*)<\/(Package|)Version>\s*$
    # Useful with external providers like Nerdbank.GitVersioning, ignores VERSION_FILE_PATH & VERSION_REGEX
        VERSION_STATIC: asd # optional
    # Flag to toggle git tagging, enabled by default
        TAG_COMMIT: as  # optional, default is true
    # Format of the git tag, [*] gets replaced with actual version
        TAG_FORMAT: asd # optional, default is v*
    # API key to authenticate with NuGet server
        NUGET_KEY: ${{secrets.NUGETKEY}} # optional
    # NuGet server uri hosting the packages, defaults to https://api.nuget.org
        NUGET_SOURCE: asd # optional, default is https://api.nuget.org
    # Flag to toggle pushing symbols along with nuget package to the server, disabled by default
        INCLUDE_SYMBOLS: dasd # optional
        
